@using linc.Utility
@using System.Net
@using System.Web
@using Microsoft.AspNetCore.Mvc.TagHelpers
@model SourceIndexViewModel

@{
    ViewData["Title"] = HtmlLocalizer["Source_IndexPage_Title"];
    ViewData["Area"] = SiteConstant.LandingPageArea;
}

@section Breadcrumbs {
    <!-- ======= Breadcrumbs ======= -->
    <section class="breadcrumbs">
        <div class="container">

            <div class="d-flex justify-content-between align-items-center">
                <h2>@HtmlLocalizer["Source_IndexPage_SubTitle"]</h2>
                <ol>
                    <li>
                        <a href="/">@HtmlLocalizer["NavItem_Home"]</a>
                    </li>
                    @if (Model.AuthorsFilter?.Length > 1)
                    {
                        <li>
                            <a asp-controller="Source" asp-action="Index">@ViewData["Title"]</a>
                        </li>

                        <li>@Model.AuthorsFilter</li>
                    }
                    else
                    {
                        <li>@ViewData["Title"]</li>
                    }
                </ol>
            </div>

        </div>
    </section>
    <!-- End Breadcrumbs -->
}

<section class="portfolio-details">
    <div class="container">
        <div class="row">
            
            <small class="pb-3">@HtmlLocalizer["Source_IndexPage_SearchDescription"]</small>

            <div class="col-md-8">

                <div class="alphabet-sort">

                    <div class="alphabet-wildcard alphabet-letter clear">
                        <a href="@Url.Action("Index", "Source", new { year = Model.CurrentYearFilter, issueId = Model.CurrentIssueId })">
                            <i class="bi bi-asterisk"></i>
                        </a>
                    </div>

                    <div class="row">
                        @foreach (var letter in SiteConstant.CyrillicAlphabet.Select(x => x.ToString()))
                        {
                            <div class="alphabet-letter @(Model.CurrentAuthorsFilter == letter ? "active" : "")">
                                <a href="@Url.Action("Index", "Source", new { filter = WebUtility.UrlEncode(letter), year = Model.CurrentYearFilter, issueId = Model.CurrentIssueId })">@letter</a>
                            </div>
                        }
                    </div>

                    <div class="row">
                        @foreach (var letter in SiteConstant.LatinAlphabet.Select(x => x.ToString()))
                        {
                            <div class="alphabet-letter @(Model.CurrentAuthorsFilter == letter ? "active" : "")">
                                <a href="@Url.Action("Index", "Source", new { filter = WebUtility.UrlEncode(letter), year = Model.CurrentYearFilter, issueId = Model.CurrentIssueId })">@letter</a>
                            </div>
                        }
                    </div>

                </div>

                <div id="list-source" class="content" role="main">

                    @if (Model.Records.Any())
                    {
                        <ul>
                            @foreach (var source in Model.Records)
                            {
                                <li class="source-container">

                                    <div class="source-origin-container">
                                        <p class="source-orgin">
                                            <small>
                                                <a asp-controller="Issue" asp-action="Details" asp-route-id="@source.IssueId">
                                                    @IIssueService.DisplayIssueLabelInformation(source.Issue.IssueNumber, source.Issue.ReleaseYear)
                                                </a>
                                            </small>
                                        </p>
                                    </div>

                                    @if (source.Authors.Any())
                                    {
                                        foreach (var author in source.Authors)
                                        {
                                            <p class="source-author">

                                                <a asp-controller="Source" asp-action="Index" asp-route-filter="@WebUtility.UrlEncode(author.Names)">
                                                    @author.Names
                                                </a>
                                                @if (!string.IsNullOrEmpty(author.Notes))
                                                {
                                                    <br/>
                                                    <small>
                                                        @Html.Raw(author.Notes.ReplaceLineEndings("<br>"))
                                                    </small>
                                                }
                                            </p>
                                        }

                                        @if (!string.IsNullOrEmpty(source.AuthorsNotes))
                                        {
                                            <br/>
                                            <small>
                                                @Html.Raw(source.AuthorsNotes.ReplaceLineEndings("<br>"))
                                            </small>
                                        }
                                    }
                                    
                                    @if (!string.IsNullOrWhiteSpace(source.DOI))
                                    {
                                        <p class="source-doi">
                                            <a href="@source.DOI" target="_blank">
                                                <small>@source.DOI <sup><i class="bi bi-box-arrow-up-right"></i></sup></small>
                                            </a>
                                        </p>
                                    }

                                    <p class="source-title annotate">
                                        <a href="@Url.Action("LoadSourceDocument", "Document", new { sourceId = source.Id })" target="_blank">@source.Title</a>
                                    </p>

                                    <p class="source-page text-end">
                                        <strong><a href="@Url.Action("LoadIssueDocument", "Document", new { issueId = source.IssueId })#page=@source.StartingPdfPage" target="_blank">@source.StartingIndexPage</a></strong>
                                    </p>

                                    @if (!string.IsNullOrEmpty(source.TitleNotes))
                                    {
                                        <small class="annotate">@source.TitleNotes</small>
                                    }

                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>
                            @HtmlLocalizer["Source_IndexPage_NoResults"]
                        </p>
                    }

                    @if (Model.TotalPages > 1)
                    {
                        <partial name="_Paging" model="Model" />
                    }

                </div>
            </div>

            <div class="col-md-4 text-end">

                <div class="portfolio-description">
                    <h2>@HtmlLocalizer["Source_IndexPage_FilterByYears_Title"]</h2>
                    <p>
                        <ul class="icon-links">
                            <li>
                                <i class="bx bx-chevron-right"></i>
                                <a class="@(Model.CurrentYearFilter.HasValue ? string.Empty : "active")" href="@Url.Action("Index", "Source")">
                                    @HtmlLocalizer["All_Label"]
                                </a>
                            </li>
                            @foreach (var filter in Model.YearFilter)
                            {
                                <li>
                                    <i class="bx bx-chevron-right"></i>
                                    <a class="@(Model.CurrentYearFilter == filter.Year ? "active" : "")" href="@Url.Action("Index", "Source", new { year = filter.Year })">
                                        @filter.Year (@filter.Count)
                                    </a>
                                </li>
                            }
                        </ul>
                    </p>
                    <h2>@HtmlLocalizer["Source_IndexPage_FilterByIssues_Title"]</h2>
                    <p>
                        <ul class="icon-links">
                            <li>
                                <i class="bx bx-chevron-right"></i>
                                <a class="@(Model.CurrentIssueId.HasValue ? string.Empty : "active")" href="@Url.Action("Index", "Source")">
                                    @HtmlLocalizer["All_Label"]
                                </a>
                            </li>
                            @foreach (var filter in Model.IssuesFilter)
                            {
                                <li>
                                    <i class="bx bx-chevron-right"></i>
                                    <a class="@(Model.CurrentIssueId == filter.IssueId ? "active" : "")" href="@Url.Action("Index", "Source", new { issueId = filter.IssueId })">
                                        @filter.IssueTitle (@filter.Count)
                                    </a>
                                </li>
                            }
                        </ul>
                    </p>
                </div>

            </div>
        </div>
    </div>
</section>

@section Newsletter {
    <partial name="Newsletter/_Submit" />
}

@{

    var safeSearchQuery = "";
    if (Model.AuthorsFilter?.Length > 1)
    {
        safeSearchQuery = HttpUtility.JavaScriptStringEncode(Model.AuthorsFilter);
    }
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $("#nav-sources").addClass('active');
            
            function decodeHtmlEntities(encodedString) {
                let textArea = document.createElement('textarea');
                textArea.innerHTML = encodedString;
                return textArea.value;
            }

            let encodedSearchQuery = '@safeSearchQuery';
            let searchQuery = decodeHtmlEntities(encodedSearchQuery);
            
            if(!searchQuery) {
                // nothing to do here
                // cease execution
                return;
            }

            //console.log(searchQuery);

            function highlightSearchQuery(textContent, searchQuery) {
                // Escape special regex characters in searchQuery
                let escapedSearchQuery = searchQuery.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
                let regex = new RegExp(escapedSearchQuery, 'gi'); // 'g' for global search, 'i' for case-insensitive

                return textContent.replace(regex, function (match) {
                    return `<span class="highlight">${match}</span>`;
                });
            }

            $(".annotate").each(function (index, element) {
                element.innerHTML = highlightSearchQuery(element.innerHTML, searchQuery)
            });
        })
    </script>
}