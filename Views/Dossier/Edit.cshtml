@using linc.Utility
@using linc.Models.Enumerations
@model DossierEditViewModel

@{
    ViewData["Title"] = HtmlLocalizer["Dossier_EditPage_Title"];
}

@section Breadcrumbs {
    <!-- ======= Breadcrumbs ======= -->
    <section class="breadcrumbs">
        <div class="container">

            <div class="d-flex justify-content-between align-items-center">
                <h2>@ViewData["Title"]</h2>
                <ol>
                    <li>
                        <a href="/">@HtmlLocalizer["NavItem_Home"]</a>
                    </li>
                    <li>
                        <a asp-action="Index">@HtmlLocalizer["Dossier_List_Label"]</a>
                    </li>
                    <li>
                        <a asp-action="Details" asp-route-id="@Model.Id">@HtmlLocalizer["Details_Label"]</a>
                    </li>
                    <li>@HtmlLocalizer["Edit_Label"]</li>
                </ol>
            </div>

        </div>
    </section>
    <!-- End Breadcrumbs -->
}

<div class="row">
    <div class="col-lg-8 offset-lg-2 col-md-8 offset-md-2">
        <form asp-action="Edit" enctype="multipart/form-data">

            <input asp-for="Status" type="hidden" />
            <input asp-for="SuperReviewed" type="hidden" />

            <h3>@HtmlLocalizer["Dossier_EditPage_SubTitle"]</h3>
            <small>@HtmlLocalizer["Dossier_ListHeader_Status"]: @(EnumHelper<ApplicationDossierStatus>.GetDisplayName(Model.Status))</small>

            <ul class="list-operations">

                @* NOTE: Resolve allowed operations here *@

                @if (Model.Status == ApplicationDossierStatus.Prepared)
                {
                    <li>
                        <a asp-action="UpdateStatus" asp-route-id="@Model.Id" asp-route-status="InReview" class="requires-confirm">
                            <i class='bx bx-fast-forward'></i>
                            @HtmlLocalizer["Dossier_EditPage_ToStatus"]
                            '@(EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.InReview))'
                        </a>
                    </li>
                }
                else if (Model.Status == ApplicationDossierStatus.Reviewed)
                {
                    <li>
                        <a asp-action="UpdateStatus" asp-route-id="@Model.Id" asp-route-status="Accepted" class="requires-confirm text-success">
                            <i class='bx bx-check-double'></i>
                            @(EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.Accepted))
                        </a>
                    </li>

                    @if (!Model.SuperReviewed)
                    {
                        <li>
                            <a asp-action="UpdateStatus" asp-route-id="@Model.Id" asp-route-status="InSuperReview" class="requires-confirm text-warning">
                                <i class='bx bx-comment-error'></i>
                                @(EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.InSuperReview))
                            </a>
                        </li>
                    }

                    <li>
                        <a asp-action="UpdateStatus" asp-route-id="@Model.Id" asp-route-status="AwaitingCorrections" class="requires-confirm">
                            <i class='bx bx-check'></i>
                            @(EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.AwaitingCorrections))
                        </a>
                    </li>

                    <li>
                        <a asp-action="UpdateStatus" asp-route-id="@Model.Id" asp-route-status="Rejected" class="requires-confirm text-danger">
                            <i class='bx bxs-x-circle'></i>
                            @(EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.Rejected))
                        </a>
                    </li>
                }
                else if (Model.Status == ApplicationDossierStatus.AwaitingCorrections && Model.Redacted != null)
                {
                    <li>
                        <a asp-action="UpdateStatus" asp-route-id="@Model.Id" asp-route-status="AcceptedWithCorrections" class="requires-confirm">
                            <i class='bx bx-check'></i>
                            @(EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.AcceptedWithCorrections))
                        </a>
                    </li>
                }
                else if (User.IsAtLeast(SiteRole.HeadEditor) && Model.Status is ApplicationDossierStatus.Accepted or ApplicationDossierStatus.AcceptedWithCorrections)
                {
                    <li>
                        <a asp-action="UpdateStatus" asp-route-id="@Model.Id" asp-route-status="AwaitingCorrections" class="requires-confirm">
                            <i class='bx bx-rewind'></i>
                            @HtmlLocalizer["Dossier_EditPage_BackToStatus"]
                            '@(EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.AwaitingCorrections))'
                        </a>
                    </li>
                }
                
                @if (Model.Status is < ApplicationDossierStatus.Reviewed or ApplicationDossierStatus.AwaitingCorrections)
                {
                    <li>
                        <a asp-action="UpdateStatus" asp-route-id="@Model.Id" asp-route-status="Rejected" class="requires-confirm text-danger">
                            <i class='bx bxs-x-circle'></i>
                            @(EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.Rejected))
                        </a>
                    </li>
                }

                <li>
                    <a asp-action="Details" asp-route-id="@Model.Id">
                        @HtmlLocalizer["Dossier_BackToDetails_Label"]
                    </a>
                </li>

            </ul>

            <hr />

            <div asp-validation-summary="All" class="text-danger"></div>

            <div class="form-floating">
                <input asp-for="Title" class="form-control" readonly="readonly" />
                <label asp-for="Title" class="form-label"></label>
            </div>

            <div class="row">
                <div class="col-sm-12">

                    <partial name="_EditAuthors" model="Model.Authors" />
                </div>
            </div>

            @if (User.IsAtLeast(SiteRole.HeadEditor))
            {
                <div class="form-floating">
                    <select asp-for="AssigneeId" asp-items="@Model.Editors" class="form-select"></select>
                    <label asp-for="AssigneeId" class="form-label"></label>
                    <span asp-validation-for="AssigneeId" class="invalid-feedback"></span>
                </div>
            }
            else
            {
                <input asp-for="AssigneeId" type="hidden" />

                <div class="form-floating">
                    <input asp-for="AssigneeNames" class="form-control" readonly="readonly" />
                    <label asp-for="AssigneeNames" class="form-label"></label>
                </div>
            }
        
            @*@if (Model.Agreement is not null)
            {
                <div class="input-group">
                    <span class="input-group-text">@Html.DisplayNameFor(x => x.Agreement)</span>
                    <input asp-for="AgreementDocument" type="text" class="form-control" disabled="disabled" readonly="readonly" value="@Model.Agreement.OriginalFileName"/>
                    <a class="btn btn-outline-primary" id="download-declaration" href="@Url.Action("LoadDossierDocument", "Document", new { dossierId = Model.Id, documentId = Model.Agreement.Id })">@HtmlLocalizer["Download_Button_Label"]</a>
                    @if (User.IsAtLeast(SiteRole.HeadEditor))
                    {
                        <a id="delete-agreement-button" class="btn btn-outline-danger" href="#delete-agreement-form">@HtmlLocalizer["Delete_Button_Label"]</a>
                    }
                </div>
            }
            else if (Model.CanAttachAgreement)
            {
                <div class="form-group">
                    <label asp-for="AgreementDocument" class="form-label"></label>
                    <input asp-for="AgreementDocument" class="form-control" accept=".doc,.docx, .pdf" />
                    <span asp-validation-for="AgreementDocument" class="invalid-feedback"></span>
                </div>
            }*@

            @* NOTE: Resolve allowed input for operations here *@

            @if (Model.Status == ApplicationDossierStatus.New)
            {
                <hr />

                // allow uploading an Anonymized document
                <input asp-for="DocumentType" type="hidden" value="@ApplicationDocumentType.Anonymized" />

                <div class="alert alert-info" role="alert">
                    <i class='bx bxs-info-circle'></i>
                    @HtmlLocalizer["Dossier_EditPage_UploadAnonymizedDocument_Info",
                             EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.Prepared)]
                </div>

                <div class="form-group">
                    <div class="mb-3">
                        <label asp-for="Document" class="form-label">
                            @HtmlLocalizer["Dossier_EditPage_UploadAnonymizedDocument"]
                        </label>
                        <input asp-for="Document" class="form-control" accept=".doc,.docx" />
                        <span asp-validation-for="Document" class="invalid-feedback"></span>
                    </div>
                </div>
            }
            else if (Model.Status == ApplicationDossierStatus.Prepared)
            {
                <hr />

                // allow overriding an Anonymized document
                <input asp-for="DocumentType" type="hidden" value="@ApplicationDocumentType.Anonymized" />

                <div class="alert alert-warning" role="alert">
                    <i class='bx bxs-error'></i>
                    @HtmlLocalizer["Dossier_EditPage_UploadAnonymizedDocument_Warning"]
                </div>

                <div class="form-group">
                    <div class="mb-3">
                        <label asp-for="Document" class="form-label">
                            @HtmlLocalizer["Dossier_EditPage_UploadAnonymizedDocument"]
                        </label>
                        <input asp-for="Document" class="form-control" accept=".doc,.docx" />
                        <span asp-validation-for="Document" class="invalid-feedback"></span>
                    </div>
                </div>
            }
            else if (Model.Status is ApplicationDossierStatus.InReview or ApplicationDossierStatus.InSuperReview)
            {
                <hr />

                if (Model.Reviews.Count == 1)
                {
                    <div class="alert alert-info" role="alert">
                        <i class='bx bxs-info-circle'></i>
                        <span>@HtmlLocalizer["Dossier_EditPage_UploadReviewDocument_Info", EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.Reviewed)]</span>
                    </div>
                }
                else if (Model.Reviews.Count == 2)
                {
                    <div class="alert alert-info" role="alert">
                        <i class='bx bxs-info-circle'></i>
                        <span>@HtmlLocalizer["Dossier_EditPage_UploadSuperReviewDocument_Info", EnumHelper<ApplicationDossierStatus>.GetDisplayName(ApplicationDossierStatus.Reviewed)]</span>
                    </div>
                }

                // allow uploading a Review document
                @if (Model.Status == ApplicationDossierStatus.InSuperReview)
                {
                    <input asp-for="DocumentType" type="hidden" value="@ApplicationDocumentType.SuperReview" />
                }
                else
                {
                    <input asp-for="DocumentType" type="hidden" value="@ApplicationDocumentType.Review" />
                }

                <div class="form-group">
                    <div class="mb-3">
                        <label asp-for="Document" class="form-label">
                            @if (Model.Status == ApplicationDossierStatus.InSuperReview)
                            {
                                @HtmlLocalizer["Dossier_EditPage_UploadSuperReviewDocument"]
                            }
                            else
                            {
                                @HtmlLocalizer["Dossier_EditPage_UploadReviewDocument"]
                            }
                        </label>
                        <input asp-for="Document" class="form-control" accept=".doc,.docx" />
                        <span asp-validation-for="Document" class="invalid-feedback"></span>
                    </div>
                </div>

                <div class="row">
                    <div class="col-sm-6">
                        <div class="form-floating">
                            <input asp-for="ReviewerFirstName" class="form-control" />
                            <label asp-for="ReviewerFirstName" class="form-label"></label>
                        </div>
                    </div>

                    <div class="col-sm-6">
                        <div class="form-floating">
                            <input asp-for="ReviewerLastName" class="form-control" />
                            <label asp-for="ReviewerLastName" class="form-label"></label>
                        </div>
                    </div>
                </div>

                <div class="col-lg-8 offset-lg-2">
                    <div class="form-floating">
                        <input asp-for="ReviewerEmail" class="form-control" />
                        <label asp-for="ReviewerEmail" class="form-label"></label>
                    </div>
                </div>
            }
            else if (Model.Status == ApplicationDossierStatus.AwaitingCorrections)
            {
                <hr />

                if (Model.Redacted != null)
                {
                    <div class="alert alert-warning" role="alert">
                        <i class='bx bxs-error'></i>
                        @HtmlLocalizer["Dossier_EditPage_UploadRedactedDocument_Warning"]
                    </div>
                }

                // allow uploading a Redacted document
                <input asp-for="DocumentType" type="hidden" value="@ApplicationDocumentType.Redacted" />

                <div class="form-group">
                    <div class="mb-3">
                        <label asp-for="Document" class="form-label">
                            @HtmlLocalizer["Dossier_EditPage_UploadRedactedDocument"]
                        </label>
                        <input asp-for="Document" class="form-control" accept=".doc,.docx" />
                        <span asp-validation-for="Document" class="invalid-feedback"></span>
                    </div>
                </div>
            }

            <hr />

            <div class="text-end">
                <button type="reset" class="btn btn-lg btn-outline-secondary">
                    @HtmlLocalizer["Reset_Button_Label"]
                </button>

                <button id="change-password-button" type="submit" class="w-50 btn btn-lg btn-primary">
                    @HtmlLocalizer["Save_Button_Label"]
                </button>
            </div>
        </form>
        
        @*@if (Model.CanDeleteAgreement)
        {
            <form id="delete-agreement-form" asp-action="DeleteAgreement" asp-route-id="@Model.Id">
                <input asp-for="Id" hidden="hidden"/>
                <input asp-for="Agreement.Id" hidden="hidden" />
            </form>
        }*@

    </div>
</div>

@section Newsletter {
    <partial name="Newsletter/_ReportBug" />
}

@section Scripts {
    <partial name="_ValidationScripts"/>

    <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            let elements = document.querySelectorAll('.requires-confirm');
            elements.forEach((element) => {
                element.addEventListener('click', (e) => {
                    e.preventDefault();

                    Swal.fire({

                        icon: "question",
                        title: window.jsLocalizer["DossierEdit_ConfirmStatusChange_Title"],
                        text: window.jsLocalizer["DossierEdit_ConfirmStatusChange"],
                        showCancelButton: true

                    }).then((result) => {
                        if (!result.isConfirmed) {
                            return;
                        }

                        window.showPreloader();
                        window.location.href = e.target.href;
                    });
                })
            });

            let deleteAgreementButton = document.getElementById("delete-agreement-button");
            if(deleteAgreementButton) {
                deleteAgreementButton.addEventListener('click', (e) => {
                    e.preventDefault();

                    Swal.fire({

                        icon: "question",
                        title: window.jsLocalizer["DossierEdit_ConfirmDeleteAgreement_Title"],
                        text: window.jsLocalizer["DossierEdit_ConfirmDeleteAgreement"],
                        showCancelButton: true

                    }).then((result) => {
                        if (!result.isConfirmed) {
                            return;
                        }
                        
                        let target = $(e.target).attr("href");
                        target = $(target);
                        target.submit();
                        
                    });
                })
            }
        });
    </script>
}